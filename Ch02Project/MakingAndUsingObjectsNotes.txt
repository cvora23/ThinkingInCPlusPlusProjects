Making & Using Objects Notes

Q1: Process of Language Translation
All computer languages are translated from something that tends
to be easy for a human to understand (source code) into something
that is executed on a computer (machine instructions). Traditionally,
translators fall into two classes: interpreters and compilers.

Interpreters
An interpreter translates source code into activities (which may
comprise groups of machine instructions) and immediately
executes those activities. BASIC, for example, has been a popular
interpreted language. Traditional BASIC interpreters translate and
execute one line at a time, and then forget that the line has been
translated. This makes them slow, since they must re-translate any
repeated code. BASIC has also been compiled, for speed. More
modern interpreters, such as those for the Python language,
translate the entire program into an intermediate language that is
then executed by a much faster interpreter1.
Interpreters have many advantages. The transition from writing
code to executing code is almost immediate, and the source code is
always available so the interpreter can be much more specific when
an error occurs. The benefits often cited for interpreters are ease of
interaction and rapid development (but not necessarily execution)
of programs.
Interpreted languages often have severe limitations when building
large projects (Python seems to be an exception to this). The
interpreter (or a reduced version) must always be in memory to
execute the code, and even the fastest interpreter may introduce
unacceptable speed restrictions. Most interpreters require that the
complete source code be brought into the interpreter all at once.
Not only does this introduce a space limitation, it can also cause
more difficult bugs if the language doesn’t provide facilities to
localize the effect of different pieces of code.

Compilers
A compiler translates source code directly into assembly language
or machine instructions. The eventual end product is a file or files
containing machine code. This is an involved process, and usually
takes several steps. The transition from writing code to executing
code is significantly longer with a compiler.
Depending on the acumen of the compiler writer, programs
generated by a compiler tend to require much less space to run, and
they run much more quickly. Although size and speed are
probably the most often cited reasons for using a compiler, in many
situations they aren’t the most important reasons. Some languages
(such as C) are designed to allow pieces of a program to be
compiled independently. These pieces are eventually combined
into a final executable program by a tool called the linker. This
process is called separate compilation.
Separate compilation has many benefits. A program that, taken all
at once, would exceed the limits of the compiler or the compiling
environment can be compiled in pieces. Programs can be built and
tested one piece at a time. Once a piece is working, it can be saved
and treated as a building block. Collections of tested and working
pieces can be combined into libraries for use by other programmers.
As each piece is created, the complexity of the other pieces is
hidden. All these features support the creation of large programs2.
Compiler debugging features have improved significantly over
time. Early compilers only generated machine code, and the
programmer inserted print statements to see what was going on.
This is not always effective. Modern compilers can insert
information about the source code into the executable program.
This information is used by powerful source-level debuggers to show
exactly what is happening in a program by tracing its progress
through the source code.
Some compilers tackle the compilation-speed problem by
performing in-memory compilation. Most compilers work with files,
reading and writing them in each step of the compilation process.
In-memory compilers keep the compiler program in RAM. For
small programs, this can seem as responsive as an interpreter.

Q2: Compilation process
To program in C and C++, you need to understand the steps and
tools in the compilation process. Some languages (C and C++, in
particular) start compilation by running a preprocessor on the source
code. The preprocessor is a simple program that replaces patterns
in the source code with other patterns the programmer has defined
(using preprocessor directives). Preprocessor directives are used to
save typing and to increase the readability of the code. 
The pre-processed code is often written to an intermediate file.
Compilers usually do their work in two passes. The first pass parses
the pre-processed code. The compiler breaks the source code into
small units and organizes it into a structure called a tree. In the
expression “A + B” the elements ‘A’, ‘+,’ and ‘B’ are leaves on the
parse tree.
A global optimizer is sometimes used between the first and second
passes to produce smaller, faster code.
In the second pass, the code generator walks through the parse tree
and generates either assembly language code or machine code for
the nodes of the tree. If the code generator creates assembly code,
the assembler must then be run. The end result in both cases is an
object module (a file that typically has an extension of .o or .obj). A
peephole optimizer is sometimes used in the second pass to look for
pieces of code containing redundant assembly-language
statements.
The use of the word “object” to describe chunks of machine code is
an unfortunate artifact. The word came into use before object-
oriented programming was in general use. “Object” is used in the
same sense as “goal” when discussing compilation, while in object-
oriented programming it means “a thing with boundaries.”
The linker combines a list of object modules into an executable
program that can be loaded and run by the operating system. When
a function in one object module makes a reference to a function or
variable in another object module, the linker resolves these
references; it makes sure that all the external functions and data
you claimed existed during compilation do exist. The linker also
adds a special object module to perform start-up activities.
The linker can search through special files called libraries in order to
resolve all its references. A library contains a collection of object
modules in a single file. A library is created and maintained by a
program called a librarian.

Q3: Static type checking
The compiler performs type checking during the first pass. Type
checking tests for the proper use of arguments in functions and
prevents many kinds of programming errors. Since type checking
occurs during compilation instead of when the program is running,
it is called static type checking.
Some object-oriented languages (notably Java) perform some type
checking at runtime (dynamic type checking). If combined with static
type checking, dynamic type checking is more powerful than static
type checking alone. However, it also adds overhead to program
execution.
C++ uses static type checking because the language cannot assume
any particular runtime support for bad operations. Static type 
checking notifies the programmer about misuses of types during
compilation, and thus maximizes execution speed. As you learn
C++, you will see that most of the language design decisions favor
the same kind of high-speed, production-oriented programming
the C language is famous for.
You can disable static type checking in C++. You can also do your
own dynamic type checking – you just need to write the code.

Q4: Declarations vs Definition
A declaration introduces a name – an identifier – to the compiler. It
tells the compiler “This function or this variable exists somewhere,
and here is what it should look like.” A definition, on the other
hand, says: “Make this variable here” or “Make this function here.”
It allocates storage for the name. This meaning works whether
you’re talking about a variable or a function; in either case, at the
point of definition the compiler allocates storage. For a variable, the
compiler determines how big that variable is and causes space to be
generated in memory to hold the data for that variable. For a
function, the compiler generates code, which ends up occupying
storage in memory.
You can declare a variable or a function in many different places,
but there must be only one definition in C and C++ (this is
sometimes called the ODR: one-definition rule). When the linker is
uniting all the object modules, it will usually complain if it finds
more than one definition for the same function or variable.
A definition can also be a declaration. If the compiler hasn’t seen
the name x before and you define int x; , the compiler sees the name
as a declaration and allocates storage for it all at once.

Q5: Argument function declarations
Arguments in function declarations may have names. The compiler
ignores the names but they can be helpful as mnemonic devices for
the user.

Q6: Function empty argument lists
There is a significant difference between C and C++ for functions
with empty argument lists. In C, the declaration:
int func2();
means “a function with any number and type of argument.” This
prevents type-checking, so in C++ it means “a function with no
arguments.”

Q5: Argument function definition
Arguments in the function definition must have names if you want
to use the arguments in the function body (since they are never
used here, they are optional).

Q6: Variable and Function declaration
A variable declaration tells the compiler what a variable
looks like. It says, “I know you haven’t seen this name before, but I
promise it exists someplace, and it’s a variable of X type.”
In a function declaration, you give a type (the return value), the
function name, the argument list, and a semicolon. That’s enough
for the compiler to figure out that it’s a declaration and what the
function should look like. 

Q7: Variable declaration problem and use of extern key word
By inference, a variable declaration might
be a type followed by a name. For example:
int a;
could declare the variable a as an integer, using the logic above.
Here’s the conflict: there is enough information in the code above
for the compiler to create space for an integer called a, and that’s
what happens. To resolve this dilemma, a keyword was necessary
for C and C++ to say “This is only a declaration; it’s defined
elsewhere.” The keyword is extern. It can mean the definition is
external to the file, or that the definition occurs later in the file.
Declaring a variable without defining it means using the extern
keyword before a description of the variable, like this:
extern int a;
Q8: Extern applied to functions
extern can also apply to function declarations. For func1( ) ,
it looks like this:
extern int func1(int length, int width);
This statement is equivalent to the previous func1( )declarations.
Since there is no function body, the compiler must treat it as a
function declaration rather than a function definition. The extern
keyword is thus superfluous and optional for function declarations.
It is probably unfortunate that the designers of C did not require
the use of extern for function declarations; it would have been more
consistent and less confusing (but would have required more
typing, which probably explains the decision).

Q9: Function argument identifiers
In the function declarations, the argument identifiers are optional.
In the definitions, they are required (the identifiers are required
only in C, not C++).

Q10: Standard Include format
As C++ evolved, different compiler vendors chose different
extensions for file names. In addition, various operating systems
have different restrictions on file names, in particular on name
length. These issues caused source code portability problems. To
smooth over these rough edges, the standard uses a format that
allows file names longer than the notorious eight characters and
eliminates the extension. For example, instead of the old style of
including iostream.h ,
 which looks like this:
#include <iostream.h>
you can now write:
#include <iostream>
The translator can implement the include statements in a way that
suits the needs of that particular compiler and operating system, if
necessary truncating the name and adding an extension. Of course,
you can also copy the headers given you by your compiler vendor
to ones without extensions if you want to use this style before a
vendor has provided support for it.
The libraries that have been inherited from C are still available with
the traditional ‘.h’ extension. However, you can also use them with
the more modern C++ include style by prepending a “c” before the
name. Thus:
#include#includebecome:
<stdio.h>
<stdlib.h>
#include#include<cstdio>
<cstdlib>
And so on, for all the Standard C headers. This provides a nice
distinction to the reader indicating when you’re using C versus
C++ libraries.
The effect of the new include format is not identical to the old:
using the .h gives you the older, non-template version, and
omitting the .h gives you the new templatized version. You’ll
usually have problems if you try to intermix the two forms in a
single program.

Q11: Linking
The linker collects object modules (which often use file name
extensions like .o or .obj), generated by the compiler, into an
executable program the operating system can load and run. It is the
last phase of the compilation process.
Linker characteristics vary from system to system. In general, you
just tell the linker the names of the object modules and libraries you
want linked together, and the name of the executable, and it goes to
work. Some systems require you to invoke the linker yourself. With
most C++ packages you invoke the linker through the C++
compiler. In many situations, the linker is invoked for you
invisibly. Some older linkers won’t search object files and libraries more than
once, and they search through the list you give them from left to
right. This means that the order of object files and libraries can be
important. If you have a mysterious problem that doesn’t show up
until link time, one possibility is the order in which the files are
given to the linker.

Q12: How to use libraries
1. Include the library’s header file.
2. Use the functions and variables in the library.
3. Link the library into the executable program.
These steps also apply when the object modules aren’t combined
into a library. Including a header file and linking the object
modules are the basic steps for separate compilation in both C and
C++.

Q13: How linker searches a library
When you make an external reference to a function or variable in C
or C++, the linker, upon encountering this reference, can do one of
two things. If it has not already encountered the definition for the
function or variable, it adds the identifier to its list of “unresolved
references.” If the linker has already encountered the definition, the
reference is resolved.
If the linker cannot find the definition in the list of object modules,
it searches the libraries. Libraries have some sort of indexing so the
linker doesn’t need to look through all the object modules in the
library – it just looks in the index. When the linker finds a definition
in a library, the entire object module, not just the function
definition, is linked into the executable program. Note that the
whole library isn’t linked, just the object module in the library that
contains the definition you want (otherwise programs would be
unnecessarily large). If you want to minimize executable program
size, you might consider putting a single function in each source
code file when you build your own libraries. This requires more
editing3, but it can be helpful to the user.
Because the linker searches files in the order you give them, you
can pre-empt the use of a library function by inserting a file with
your own function, using the same function name, into the list
before the library name appears. Since the linker will resolve any
references to this function by using your function before it searches
the library, your function is used instead of the library function.
Note that this can also be a bug, and the kind of thing C++
namespaces prevent.

Q14: Secret additions while linking 
When a C or C++ executable program is created, certain items are
secretly linked in. One of these is the startup module, which
contains initialization routines that must be run any time a C or
C++ program begins to execute. These routines set up the stack and
initialize certain variables in the program.
The linker always searches the standard library for the compiled
versions of any “standard” functions called in the program.
Because the standard library is always searched, you can use
anything in that library by simply including the appropriate header
file in your program; you don’t have to tell it to search the standard
library. The iostream functions, for example, are in the Standard
C++ library. To use them, you just include the <iostream>header
file.
If you are using an add-on library, you must explicitly add the
library name to the list of files handed to the linker.

Q15: Posix standard
POSIX is a standard based on a Unix standardization
effort that includes functions that go beyond the scope of the C++
library. You can generally expect to find POSIX functions on Unix
(in particular, Linux) platforms, and often under DOS/Windows.
For example, if you’re using multithreading you are better off using
the POSIX thread library because your code will then be easier to
understand, port and maintain (and the POSIX thread library will
usually just use the underlying thread facilities of the operating
system, if these are provided).

Q16: Namespace collision in C
one of the problems encountered in the
C language is that you “run out of names” for functions and
identifiers when your programs reach a certain size. Of course, you
don’t really run out of names; it does, however, become harder to
think of new ones after awhile. More importantly, when a program
reaches a certain size it’s typically broken up into pieces, each of
which is built and maintained by a different person or group. Since
C effectively has a single arena where all the identifier and function
names live, this means that all the developers must be careful not to
accidentally use the same names in situations where they can
conflict. This rapidly becomes tedious, time-wasting, and,
ultimately, expensive.

Q17: C++ namespaces
Standard C++ has a mechanism to prevent this collision: the
namespacekeyword. Each set of C++ definitions in a library or
program is “wrapped” in a namespace, and if some other definition
has an identical name, but is in a different namespace, then there is
no collision.

Q18: Namespaces use cases
There’s a keyword that allows you to say “I want to use the
declarations and/or definitions in this namespace.” This keyword,
appropriately enough, is using. All of the Standard C++ libraries
are wrapped in a single namespace, which is std (for “standard”).
using directive 
using namespace std;
This means that you want to expose all the elements from the
namespace called std.
Exposing all the elements from a namespace after someone has
gone to the trouble to hide them may seem a bit counterproductive,
and in fact you should be careful about thoughtlessly doing this (as
you’ll learn later in the book). However, the using directive
exposes only those names for the current file, so it is not quite as
drastic as it first sounds. (But think twice about doing it in a header
file – that is reckless.) 

Q19: Iostream manipulators
iostreams class printing numbers in
decimal, octal, and hexadecimal using iostream manipulators (which
don’t print anything, but change the state of the output stream).

Q20: Character array concatenation
An important feature of the C preprocessor is character array
concatenation. This feature is used in some of the examples in this
book. If two quoted character arrays are adjacent, and no
punctuation is between them, the compiler will paste the character
arrays together into a single character array.
Remember that C and
C++ are free-form languages, and although you’ll usually see a
semicolon at the end of each line, the actual requirement is for a
semicolon at the end of each statement, and it’s possible for a
statement to continue over several lines.

Q21: Calling other programs
While the typical way to use a program that reads from standard
input and writes to standard output is within a Unix shell script or
DOS batch file, any program can be called from inside a C or C++
program using the Standard C system( )function, which is
declared in the header file <cstdlib>
To use the system( )function, you give it a character array that you
would normally type at the operating system command prompt.
This can also include command-line arguments, and the character
array can be one that you fabricate at run time.
The command executes and control returns to the program.

Q22: Confusion betwee Standard C++ Library and STL
There is often a bit of confusion between the containers and
algorithms in the Standard C++ Library, and the entity known as
the STL. The Standard Template Library was the name Alex
Stepanov (who was working at Hewlett-Packard at the time) used
when he presented his library to the C++ Standards Committee at
the meeting in San Diego, California in Spring 1994. The name
stuck, especially after HP decided to make it available for public
downloads. Meanwhile, the committee integrated it into the
Standard C++ Library, making a large number of changes. STL's
development continues at Silicon Graphics (SGI; see
http://www.sgi.com/Technology/STL). The SGI STL diverges from the
Standard C++ Library on many subtle points. So although it's a
popular misconception, the C++ Standard does not “include” the
STL. It can be a bit confusing since the containers and algorithms in
the Standard C++ Library have the same root (and usually the same
names) as the SGI STL. In this book, I will say “The Standard C++
Library” or “The Standard Library containers,” or something
similar and will avoid the term “STL.”



